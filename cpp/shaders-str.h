//
// Created by pc on 13/04/2022.
//

#ifndef WT_SHADERS_STR_H
#define WT_SHADERS_STR_H

#include <string>

using namespace std;
string vert_lamp(){
    const string  v ( "#version 330 core\n"
                      "layout (location = 0) in vec3 position;\n"
                      "\n"
                      "uniform mat4 model;\n"
                      "uniform mat4 view;\n"
                      "uniform mat4 projection;\n"
                      "\n"
                      "void main()\n"
                      "{\n"
                      "  vec4 worldPosition = model * vec4(position.x, 0.0, position.y, 1.0);\n"
                      "    vec4 positionRelativeToCam = projection * view * worldPosition;\n"
                      "    gl_Position =  positionRelativeToCam;"
                      "} ");
    return  v;
}
string frag_lamp(){
    const string  v ( "#version 330 core\n"
                      "out vec4 color;\n"
                      "\n"
                      "void main()\n"
                      "{\n"
                      "    color = vec4(1.0f); // Set alle 4 vector values to 1.0f\n"
                      "}");
    return  v;
}
string vert_ocean(){
    const string  v ("#version 330 core\n"
                     "layout (location = 0) in vec3 position;\n"
                     "layout (location = 1) in vec3 normal;\n"
                     "layout (location = 2) in vec2 texCoords;\n"
                     "\n"
                     "out vec3 Normal;\n"
                     "out vec3 FragPos;\n"
                     "\n"
                     "uniform mat4 model;\n"
                     "uniform mat4 view;\n"
                     "uniform mat4 projection;\n"
                     "\n"
                     "uniform float time;\n"
                     "\n"
                     "void main()\n"
                     "{\t\n"
                     "    FragPos = vec3(model * vec4(position, 1.0f));\n"
                     "\tgl_Position = projection * view *  model * vec4(position, 1.0f);\n"
                     "    Normal = mat3(transpose(inverse(model))) * normal;  \n"
                     "} ");
    return  v;
}
string frag_ocean(){
    const string  v ("#version 330 core\n"
                     "struct Light {\n"
                     "    vec3 position;\n"
                     "    vec3 ambient;\n"
                     "    vec3 diffuse;\n"
                     "    vec3 specular;\n"
                     "};\n"
                     "\n"
                     "in vec3 FragPos;  \n"
                     "in vec3 Normal;  \n"
                     "in vec2 TexCoords;\n"
                     "  \n"
                     "out vec4 color;\n"
                     "  \n"
                     "uniform vec3 viewPos;\n"
                     "uniform Light light;\n"
                     "\n"
                     "uniform float heightMax = 0;\n"
                     "uniform float heightMin = 0;\n"
                     "\n"
                     "void main()\n"
                     "{\n"
                     "\tvec3 norm = normalize(Normal);\n"
                     "\tvec3 lightDir = normalize(light.position - FragPos); \n"
                     "\tvec3 viewDir = normalize(viewPos - FragPos);\n"
                     "\t\n"
                     "\tvec3 ambientFactor = vec3(0.0);\n"
                     "\tvec3 diffuseFactor = vec3(1.0);\n"
                     "\t\n"
                     "\tvec3 skyColor = vec3(0.65, 0.80, 0.95);\n"
                     "\t\n"
                     "\tif (dot(norm, viewDir) < 0) norm = -norm;\n"
                     "\t\n"
                     "    // Ambient\n"
                     "    vec3 ambient = light.ambient * ambientFactor;\n"
                     "\t\n"
                     "\t// Height Color\n"
                     "\tvec3 shallowColor = vec3(0.0, 0.64, 0.68);\n"
                     "\tvec3 deepColor = vec3(0.02, 0.05, 0.10);\n"
                     "\t\n"
                     "\tfloat relativeHeight;\t// from 0 to 1\n"
                     "\trelativeHeight = (FragPos.y - heightMin) / (heightMax - heightMin);\n"
                     "\tvec3 heightColor = relativeHeight * shallowColor + (1 - relativeHeight) * deepColor;\n"
                     "\t// heightColor = vec3(s);\t// Black and white\n"
                     "\t\n"
                     "\t// Spray\n"
                     "\tfloat sprayThresholdUpper = 1.0;\n"
                     "\tfloat sprayThresholdLower = 0.9;\n"
                     "\tfloat sprayRatio = 0;\n"
                     "\tif (relativeHeight > sprayThresholdLower) sprayRatio = (relativeHeight - sprayThresholdLower) / (sprayThresholdUpper - sprayThresholdLower);\n"
                     "\tvec3 sprayBaseColor = vec3(1.0);\n"
                     "\tvec3 sprayColor = sprayRatio * sprayBaseColor;\t\n"
                     "\t\n"
                     "    // Diffuse  \t\n"
                     "\tfloat diff = max(dot(norm, lightDir), 0.0);\n"
                     "\tvec3 diffuse = diffuseFactor * light.diffuse * diff;\n"
                     "\tdiffuse = vec3(0.0);\n"
                     "\t\n"
                     "\t// Psudo reflect\n"
                     "\tfloat refCoeff = pow(max(dot(norm, viewDir), 0.0), 0.3);\t// Smaller power will have more concentrated reflect.\n"
                     "\tvec3 reflectColor = (1 - refCoeff) * skyColor;\n"
                     "\t\n"
                     "    // Specular\n"
                     "\t//vec3 halfwayDir = normalize(lightDir + viewDir);\n"
                     "    //float spec = pow(max(dot(norm, halfwayDir), 0.0), 64.0);\n"
                     "\tvec3 reflectDir = reflect(-lightDir, norm); \n"
                     "\tfloat specCoeff = pow(max(dot(viewDir, reflectDir), 0.0), 64) * 3;\t// Over exposure\n"
                     "    vec3 specular = light.specular * specCoeff;\n"
                     "        \n"
                     "\tvec3 combinedColor = ambient + diffuse + heightColor + reflectColor;    \n"
                     "\t\n"
                     "\t//sprayRatio = clamp(sprayRatio, 0, 1);\n"
                     "\t//combinedColor *= (1 - sprayRatio);\n"
                     "\t//combinedColor += sprayColor;\n"
                     "\t\n"
                     "\tspecCoeff = clamp(specCoeff, 0, 1);\n"
                     "\tcombinedColor *= (1 - specCoeff);\n"
                     "\tcombinedColor += specular;\t\n"
                     "\tcolor = vec4(combinedColor, 1.0f); \n"
                     "\t\n"
                     "\t//color = vec4(sprayColor, 1.0f); \n"
                     "\t//color = vec4(heightColor, 1.0f); \n"
                     "\t//color = vec4(specular, 1.0f); \n"
                     "\t//color = vec4(1.0, 1.0, 1.0, 1.0);\n"
                     "} ");
    return  v;
}

#endif //WT_SHADERS_STR_H
